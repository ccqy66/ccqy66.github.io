<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ccqy66</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on ccqy66</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Fri, 24 May 2024 13:44:11 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>为什么会存在IO多路复用</title>
        <link>http://localhost:1313/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%AD%98%E5%9C%A8io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
        <pubDate>Fri, 24 May 2024 13:44:11 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%AD%98%E5%9C%A8io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
        <description>ccqy66 http://localhost:1313/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%AD%98%E5%9C%A8io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/ -&lt;p&gt;emsp; 在网络编程中，IO多路复用是一个绕不过的话题。例如常见的实现&lt;code&gt;select&lt;/code&gt; &lt;code&gt;poll&lt;/code&gt;和&lt;code&gt;epoll&lt;/code&gt;，以及unix平台下的&lt;code&gt;kevent&lt;/code&gt;。本文会通过网络IO模型发展入手，为大家解释为什么会有IO多路复用的存在，以及是为了解决什么问题。帮助大家快速理解IO多路复用的高效之处。&lt;/p&gt;
- http://localhost:1313/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%AD%98%E5%9C%A8io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/ - This is a customized copyright.</description>
        </item>
    
    
  </channel>
</rss> 